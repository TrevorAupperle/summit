// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")

    // Do not use foreign keys (PlanetScale does not support them)
    relationMode = "prisma"
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
    @@index([createdById])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    // Following used for Azure B2C
    refresh_token_expires_in Int?    @db.Int
    not_before               Int?    @db.Int
    id_token_expires_in      Int?    @db.Int
    profile_info             String? @db.Text

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                 String       @id @default(cuid())
    name               String?
    email              String?      @unique
    emailVerified      DateTime?
    image              String?
    academicYear       String?
    academicMajor      String?
    academicUniversity String?
    graduationYear     String?
    city               String?
    state              String?
    phone              String?
    birthday           DateTime?
    accounts           Account[]
    sessions           Session[]
    posts              Post[]
    credentials        Credentials?
}

model Credentials {
    id        String   @id @default(cuid())
    username  String   @unique
    password  String
    createdAt DateTime @default(now())
    userId    String   @unique
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
